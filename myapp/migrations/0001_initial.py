# Generated by Django 2.2.4 on 2020-12-22 06:54

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import myapp.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('userid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('useremail', models.EmailField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('usertoken', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': '"opx"."user"',
            },
            managers=[
                ('objects', myapp.models.MyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.CharField(editable=False, max_length=50, primary_key=True, serialize=False)),
                ('city_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': '"opx"."city"',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment_title', models.CharField(max_length=100)),
                ('comment_description', models.CharField(max_length=500)),
                ('comment_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': '"opx"."comment"',
            },
        ),
        migrations.CreateModel(
            name='Context',
            fields=[
                ('context_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('context_description', models.CharField(max_length=500)),
            ],
            options={
                'db_table': '"opx"."context"',
            },
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('decs_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('decs_name', models.CharField(max_length=100)),
                ('decs_description', models.CharField(max_length=500)),
            ],
            options={
                'db_table': '"opx"."decision"',
            },
        ),
        migrations.CreateModel(
            name='DimensionType',
            fields=[
                ('dim_type_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dim_type_name', models.CharField(max_length=100)),
                ('dim_type_description', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': '"opx"."dimension_type"',
            },
        ),
        migrations.CreateModel(
            name='EducationLevel',
            fields=[
                ('educlevel_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('educlevel_name', models.CharField(max_length=100)),
                ('isactive', models.IntegerField(default=1)),
            ],
            options={
                'db_table': '"opx"."education_level"',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('gender_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('gender_name', models.CharField(max_length=100)),
                ('isactive', models.IntegerField(default=1)),
            ],
            options={
                'db_table': '"opx"."gender"',
            },
        ),
        migrations.CreateModel(
            name='Neighborhood',
            fields=[
                ('neighb_id', models.IntegerField(editable=False, primary_key=True, serialize=False)),
                ('neighb_name', models.CharField(max_length=100)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.City')),
            ],
            options={
                'db_table': '"opx"."neighborhood"',
            },
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('params_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('params_value', models.CharField(max_length=100)),
                ('params_description', models.CharField(max_length=500)),
            ],
            options={
                'db_table': '"opx"."params"',
            },
        ),
        migrations.CreateModel(
            name='PeaceInitiative',
            fields=[
                ('peace_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('peace_name', models.CharField(max_length=100)),
                ('peace_description', models.CharField(max_length=500)),
                ('peace_geojson', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'db_table': '"opx"."peace_initiative"',
            },
        ),
        migrations.CreateModel(
            name='PeaceSchedule',
            fields=[
                ('peace_shc_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('peace_shc_day', models.CharField(max_length=50)),
                ('peace_shc_time', models.TimeField(blank=True, null=True)),
            ],
            options={
                'db_table': '"opx"."peace_schedule"',
            },
        ),
        migrations.CreateModel(
            name='Permissionn',
            fields=[
                ('perm_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('perm_codename', models.CharField(max_length=100)),
                ('perm_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': '"opx"."permissionn"',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('pers_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pers_name', models.CharField(max_length=255)),
                ('pers_lastname', models.CharField(max_length=255)),
                ('pers_birthdate', models.DateField()),
                ('pers_telephone', models.CharField(max_length=20)),
                ('pers_latitude', models.CharField(blank=True, max_length=30, null=True)),
                ('pers_longitude', models.CharField(blank=True, max_length=30, null=True)),
                ('hour_location', models.CharField(blank=True, max_length=100, null=True)),
                ('pers_score', models.IntegerField(blank=True, default=0, null=True)),
                ('pers_creation_date', models.DateTimeField(auto_now_add=True)),
                ('fcm_token', models.CharField(blank=True, max_length=255, null=True)),
                ('isactive', models.IntegerField(default=1)),
                ('isemployee', models.IntegerField(default=0)),
                ('education_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.EducationLevel')),
                ('gender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Gender')),
                ('neighborhood', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Neighborhood')),
            ],
            options={
                'db_table': '"opx"."person"',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('proj_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('proj_name', models.CharField(max_length=100)),
                ('proj_description', models.CharField(max_length=500)),
                ('proj_external_id', models.CharField(max_length=500)),
                ('proj_creation_date', models.DateTimeField(auto_now_add=True)),
                ('proj_close_date', models.DateTimeField(blank=True, null=True)),
                ('proj_start_date', models.DateTimeField(blank=True, null=True)),
                ('proj_completness', models.FloatField()),
                ('isactive', models.IntegerField(default=1)),
                ('proj_owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Person')),
            ],
            options={
                'db_table': '"opx"."project"',
            },
        ),
        migrations.CreateModel(
            name='ProjectType',
            fields=[
                ('projtype_id', models.UUIDField(default=False, editable=False, primary_key=True, serialize=False)),
                ('projtype_name', models.CharField(max_length=100)),
                ('projtype_description', models.CharField(max_length=500)),
            ],
            options={
                'db_table': '"opx"."project_type"',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=50)),
                ('role_description', models.CharField(max_length=255)),
                ('isactive', models.IntegerField(default=1)),
            ],
            options={
                'db_table': '"opx"."role"',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('task_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_name', models.CharField(max_length=100)),
                ('task_description', models.CharField(max_length=300)),
                ('task_observation', models.CharField(max_length=1000)),
                ('task_creation_date', models.DateTimeField(auto_now_add=True)),
                ('task_completness', models.FloatField()),
                ('isactive', models.IntegerField(default=1)),
            ],
            options={
                'db_table': '"opx"."task"',
            },
        ),
        migrations.CreateModel(
            name='TaskPriority',
            fields=[
                ('priority_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('priority_name', models.CharField(max_length=100)),
                ('priority_number', models.IntegerField(default=0)),
            ],
            options={
                'db_table': '"opx"."task_priority"',
            },
        ),
        migrations.CreateModel(
            name='TaskType',
            fields=[
                ('task_type_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_type_name', models.CharField(max_length=100)),
                ('task_type_description', models.CharField(max_length=300)),
            ],
            options={
                'db_table': '"opx"."task_type"',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('team_name', models.CharField(max_length=100)),
                ('team_effectiveness', models.FloatField()),
                ('team_leader', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Person')),
            ],
            options={
                'db_table': '"opx"."team"',
            },
        ),
        migrations.CreateModel(
            name='TerritorialDimension',
            fields=[
                ('dimension_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dimension_name', models.CharField(max_length=100)),
                ('dimension_geojson', django.contrib.postgres.fields.jsonb.JSONField()),
                ('isactive', models.IntegerField(default=1)),
                ('preloaded', models.IntegerField(default=0)),
                ('dimension_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.DimensionType')),
            ],
            options={
                'db_table': '"opx"."territorial_dimension"',
            },
        ),
        migrations.CreateModel(
            name='TeamPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participation', models.FloatField()),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Person')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Team')),
            ],
            options={
                'db_table': '"opx"."team_person"',
            },
        ),
        migrations.CreateModel(
            name='TaskRestriction',
            fields=[
                ('restriction_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('task_unique_date', models.DateField(blank=True, null=True)),
                ('task_start_date', models.DateField(blank=True, null=True)),
                ('task_end_date', models.DateField(blank=True, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Task')),
            ],
            options={
                'db_table': '"opx"."task_restriction"',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='task_priority',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.TaskPriority'),
        ),
        migrations.AddField(
            model_name='task',
            name='task_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.TaskType'),
        ),
        migrations.AddField(
            model_name='task',
            name='territorial_dimension',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.TerritorialDimension'),
        ),
        migrations.CreateModel(
            name='RolePermissionn',
            fields=[
                ('role_permissionn_id', models.AutoField(primary_key=True, serialize=False)),
                ('permissionn', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Permissionn')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Role')),
            ],
            options={
                'db_table': '"opx"."role_permissionn"',
            },
        ),
        migrations.CreateModel(
            name='ProjectTerritorialDimension',
            fields=[
                ('proj_dimension_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Project')),
                ('territorial_dimension', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.TerritorialDimension')),
            ],
            options={
                'db_table': '"opx"."project_dimension"',
            },
        ),
        migrations.CreateModel(
            name='ProjectTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Project')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Team')),
            ],
            options={
                'db_table': '"opx"."project_team"',
            },
        ),
        migrations.CreateModel(
            name='ProjectDecision',
            fields=[
                ('proj_decs_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('decision', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Decision')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Project')),
            ],
            options={
                'db_table': '"opx"."project_decision"',
            },
        ),
        migrations.CreateModel(
            name='ProjectContext',
            fields=[
                ('proj_context_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Context')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Project')),
            ],
            options={
                'db_table': '"opx"."project_context"',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='project_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.ProjectType'),
        ),
        migrations.CreateModel(
            name='PersonTask',
            fields=[
                ('person_task_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Person')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Task')),
            ],
            options={
                'db_table': '"opx"."person_task"',
            },
        ),
        migrations.AddField(
            model_name='person',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Role'),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DataContext',
            fields=[
                ('data_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hdxtag', models.CharField(max_length=100)),
                ('data_value', models.CharField(max_length=100)),
                ('data_type', models.CharField(max_length=100)),
                ('data_description', models.CharField(max_length=500)),
                ('data_geojson', django.contrib.postgres.fields.jsonb.JSONField()),
                ('data_date', models.DateField(blank=True, null=True)),
                ('data_time', models.TimeField(blank=True, null=True)),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Context')),
            ],
            options={
                'db_table': '"opx"."data_context"',
            },
        ),
    ]
